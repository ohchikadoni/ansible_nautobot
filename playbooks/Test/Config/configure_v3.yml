---
- name: Fetch device data from Nautobot
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Get all devices from Nautobot
      uri:
        url: "http://10.10.10.101:8080/api/dcim/devices/"
        method: GET
        return_content: yes
        headers:
          Authorization: "Token 3a28f76fe9d03a5467e955e71cc5b37c6a047b18"
          Accept: "application/json; indent=4"
      register: nautobot_response

    - name: Filter devices with configuration enabled
      set_fact:
        enabled_devices: "{{ nautobot_response.json.results | selectattr('custom_fields.enable_configuration', 'equalto', true) | list }}"

    - name: Fetch primary IPv4 address for each enabled device
      uri:
        url: "{{ item.primary_ip4.url }}"
        method: GET
        return_content: yes
        headers:
          Authorization: "Token 3a28f76fe9d03a5467e955e71cc5b37c6a047b18"
          Accept: "application/json; indent=4"
      loop: "{{ enabled_devices }}"
      loop_control:
        loop_var: item
        label: "Fetching IP for {{ item.name }}"
      when: item.primary_ip4 is defined
      register: ip_responses

    - name: Merge IPs with devices
      set_fact:
        devices_with_ips: >-
          {{ enabled_devices | zip(ip_responses.results | map(attribute='json.address') | list) | map('combine', {'ip': item[1]}) | list }}

    - name: Fetch interfaces for each enabled device
      uri:
        url: "http://10.10.10.101:8080/api/dcim/interfaces/?device={{ item.id }}"
        method: GET
        headers:
          Authorization: "Token 3a28f76fe9d03a5467e955e71cc5b37c6a047b18"
          Accept: "application/json; indent=4"
        return_content: yes
      loop: "{{ devices_with_ips }}"
      loop_control:
        loop_var: item
        label: "Fetching interfaces for {{ item.name }}"
      register: interfaces_info

    - name: Merge interface data with devices
      set_fact:
        devices_with_data: >-
          {{ devices_with_ips | zip(interfaces_info.results | map(attribute='json.results') | list) | map('combine', {'interfaces': item[1]}) | list }}

    - name: Generate configuration using Jinja2 template
      template:
        src: templates/device_config.j2
        dest: "/tmp/{{ item.name }}_config.txt"
      vars:
        hostname: "{{ item.name }}"
        ip_address: "{{ item.ip }}"
        interfaces: "{{ item.interfaces | default([]) }}"
      loop: "{{ devices_with_data }}"
      loop_control:
        label: "Generating config for {{ item.name }}"
